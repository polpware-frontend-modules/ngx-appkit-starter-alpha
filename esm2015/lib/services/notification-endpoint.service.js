// =============================
// Email: info@ebenmonney.com
// www.ebenmonney.com/templates
// =============================
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
export class NotificationEndpoint {
    constructor() {
        this.demoNotifications = [
            {
                id: 1,
                header: 'Welcome',
                body: 'You are ...',
                isRead: true,
                isPinned: true,
                date: '2019-05-28T16:29:13.5877958'
            }
        ];
    }
    getNotificationEndpoint(notificationId) {
        const notification = this.demoNotifications.find(val => val.id == notificationId);
        let response;
        if (notification) {
            response = this.createResponse(notification, 200);
        }
        else {
            response = this.createResponse(null, 404);
        }
        return of(response.body);
    }
    getNotificationsEndpoint(page, pageSize) {
        const notifications = this.demoNotifications;
        const response = this.createResponse(this.demoNotifications, 200);
        return of(response.body);
    }
    getUnreadNotificationsEndpoint(userId) {
        const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);
        const response = this.createResponse(unreadNotifications, 200);
        return of(response.body);
    }
    getNewNotificationsEndpoint(lastNotificationDate) {
        const unreadNotifications = this.demoNotifications;
        const response = this.createResponse(unreadNotifications, 200);
        return of(response.body);
    }
    getPinUnpinNotificationEndpoint(notificationId, isPinned) {
        const notification = this.demoNotifications.find(val => val.id == notificationId);
        let response;
        if (notification) {
            response = this.createResponse(null, 204);
            if (isPinned == null) {
                isPinned = !notification.isPinned;
            }
            notification.isPinned = isPinned;
            notification.isRead = true;
        }
        else {
            response = this.createResponse(null, 404);
        }
        return of(response.body);
    }
    getReadUnreadNotificationEndpoint(notificationIds, isRead) {
        for (const notificationId of notificationIds) {
            const notification = this.demoNotifications.find(val => val.id == notificationId);
            if (notification) {
                notification.isRead = isRead;
            }
        }
        const response = this.createResponse(null, 204);
        return of(response.body);
    }
    getDeleteNotificationEndpoint(notificationId) {
        const notification = this.demoNotifications.find(val => val.id == notificationId);
        let response;
        if (notification) {
            this.demoNotifications = this.demoNotifications.filter(val => val.id != notificationId);
            response = this.createResponse(notification, 200);
        }
        else {
            response = this.createResponse(null, 404);
        }
        return of(response.body);
    }
    createResponse(body, status) {
        return new HttpResponse({ body, status });
    }
}
/** @nocollapse */ NotificationEndpoint.ɵfac = function NotificationEndpoint_Factory(t) { return new (t || NotificationEndpoint)(); };
/** @nocollapse */ NotificationEndpoint.ɵprov = i0.ɵɵdefineInjectable({ token: NotificationEndpoint, factory: NotificationEndpoint.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NotificationEndpoint, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,