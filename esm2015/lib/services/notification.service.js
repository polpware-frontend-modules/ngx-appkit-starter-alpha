// =============================
// Email: info@ebenmonney.com
// www.ebenmonney.com/templates
// =============================
import { Injectable } from '@angular/core';
import { interval } from 'rxjs';
import { map, flatMap, startWith } from 'rxjs/operators';
import { Notification } from '../models/notification.model';
import * as i0 from "@angular/core";
import * as i1 from "./notification-endpoint.service";
import * as i2 from "@polpware/ngx-oauth2";
export class NotificationService {
    constructor(notificationEndpoint, authService) {
        this.notificationEndpoint = notificationEndpoint;
        this.authService = authService;
    }
    get currentUser() {
        return this.authService.currentUser;
    }
    get recentNotifications() {
        return this._recentNotifications;
    }
    set recentNotifications(notifications) {
        this._recentNotifications = notifications;
    }
    getNotification(notificationId) {
        return this.notificationEndpoint.getNotificationEndpoint(notificationId).pipe(map(response => Notification.Create(response)));
    }
    getNotifications(page, pageSize) {
        return this.notificationEndpoint.getNotificationsEndpoint(page, pageSize).pipe(map(response => {
            return this.getNotificationsFromResponse(response);
        }));
    }
    getUnreadNotifications(userId) {
        return this.notificationEndpoint.getUnreadNotificationsEndpoint(userId).pipe(map(response => this.getNotificationsFromResponse(response)));
    }
    getNewNotifications() {
        return this.notificationEndpoint.getNewNotificationsEndpoint(this.lastNotificationDate).pipe(map(response => this.processNewNotificationsFromResponse(response)));
    }
    getNewNotificationsPeriodically() {
        return interval(10000).pipe(startWith(0), flatMap(() => {
            return this.notificationEndpoint.getNewNotificationsEndpoint(this.lastNotificationDate).pipe(map(response => this.processNewNotificationsFromResponse(response)));
        }));
    }
    pinUnpinNotification(notificationOrNotificationId, isPinned) {
        if (typeof notificationOrNotificationId === 'number' || notificationOrNotificationId instanceof Number) {
            return this.notificationEndpoint.getPinUnpinNotificationEndpoint(notificationOrNotificationId, isPinned);
        }
        else {
            return this.pinUnpinNotification(notificationOrNotificationId.id);
        }
    }
    readUnreadNotification(notificationIds, isRead) {
        return this.notificationEndpoint.getReadUnreadNotificationEndpoint(notificationIds, isRead);
    }
    deleteNotification(notificationOrNotificationId) {
        if (typeof notificationOrNotificationId === 'number' || notificationOrNotificationId instanceof Number) { // Todo: Test me if its check is valid
            return this.notificationEndpoint.getDeleteNotificationEndpoint(notificationOrNotificationId).pipe(map(response => {
                this.recentNotifications = this.recentNotifications.filter(n => n.id != notificationOrNotificationId);
                return Notification.Create(response);
            }));
        }
        else {
            return this.deleteNotification(notificationOrNotificationId.id);
        }
    }
    processNewNotificationsFromResponse(response) {
        const notifications = this.getNotificationsFromResponse(response);
        for (const n of notifications) {
            if (n.date > this.lastNotificationDate) {
                this.lastNotificationDate = n.date;
            }
        }
        return notifications;
    }
    getNotificationsFromResponse(response) {
        const notifications = [];
        for (const i in response) {
            notifications[i] = Notification.Create(response[i]);
        }
        notifications.sort((a, b) => b.date.valueOf() - a.date.valueOf());
        notifications.sort((a, b) => (a.isPinned === b.isPinned) ? 0 : a.isPinned ? -1 : 1);
        this.recentNotifications = notifications;
        return notifications;
    }
}
/** @nocollapse */ NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(i0.ɵɵinject(i1.NotificationEndpoint), i0.ɵɵinject(i2.AuthService)); };
/** @nocollapse */ NotificationService.ɵprov = i0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable
    }], function () { return [{ type: i1.NotificationEndpoint }, { type: i2.AuthService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,