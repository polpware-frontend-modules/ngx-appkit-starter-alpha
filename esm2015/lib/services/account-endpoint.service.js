// =============================
// Email: info@ebenmonney.com
// www.ebenmonney.com/templates
// =============================
import { Injectable } from '@angular/core';
import { catchError } from 'rxjs/operators';
import { EndpointBase } from '@polpware/ngx-oauth2';
import * as i0 from "@angular/core";
import * as i1 from "@polpware/ngx-appkit-services-alpha";
import * as i2 from "@angular/common/http";
import * as i3 from "@polpware/ngx-oauth2";
export class AccountEndpoint extends EndpointBase {
    constructor(configurations, http, authService) {
        super(http, authService);
        this.configurations = configurations;
        this._usersUrl = '/api/account/users';
        this._userByUserNameUrl = '/api/account/users/username';
        this._currentUserUrl = '/api/account/users/me';
        this._currentUserPreferencesUrl = '/api/account/users/me/preferences';
        this._unblockUserUrl = '/api/account/users/unblock';
        this._rolesUrl = '/api/account/roles';
        this._roleByRoleNameUrl = '/api/account/roles/name';
        this._permissionsUrl = '/api/account/permissions';
    }
    get usersUrl() { return this.configurations.baseUrl + this._usersUrl; }
    get userByUserNameUrl() { return this.configurations.baseUrl + this._userByUserNameUrl; }
    get currentUserUrl() { return this.configurations.baseUrl + this._currentUserUrl; }
    get currentUserPreferencesUrl() { return this.configurations.baseUrl + this._currentUserPreferencesUrl; }
    get unblockUserUrl() { return this.configurations.baseUrl + this._unblockUserUrl; }
    get rolesUrl() { return this.configurations.baseUrl + this._rolesUrl; }
    get roleByRoleNameUrl() { return this.configurations.baseUrl + this._roleByRoleNameUrl; }
    get permissionsUrl() { return this.configurations.baseUrl + this._permissionsUrl; }
    getUserEndpoint(userId) {
        const endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUserEndpoint(userId));
        }));
    }
    getUserByUserNameEndpoint(userName) {
        const endpointUrl = `${this.userByUserNameUrl}/${userName}`;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUserByUserNameEndpoint(userName));
        }));
    }
    getUsersEndpoint(page, pageSize) {
        const endpointUrl = page && pageSize ? `${this.usersUrl}/${page}/${pageSize}` : this.usersUrl;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUsersEndpoint(page, pageSize));
        }));
    }
    getNewUserEndpoint(userObject) {
        return this.http.post(this.usersUrl, JSON.stringify(userObject), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getNewUserEndpoint(userObject));
        }));
    }
    getUpdateUserEndpoint(userObject, userId) {
        const endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;
        return this.http.put(endpointUrl, JSON.stringify(userObject), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUpdateUserEndpoint(userObject, userId));
        }));
    }
    getPatchUpdateUserEndpoint(valueOrPatch, opOrUserId, path, from, userId) {
        let endpointUrl;
        let patchDocument;
        if (path) {
            endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;
            patchDocument = from ?
                [{ value: valueOrPatch, path, op: opOrUserId, from }] :
                [{ value: valueOrPatch, path, op: opOrUserId }];
        }
        else {
            endpointUrl = opOrUserId ? `${this.usersUrl}/${opOrUserId}` : this.currentUserUrl;
            patchDocument = valueOrPatch;
        }
        return this.http.patch(endpointUrl, JSON.stringify(patchDocument), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getPatchUpdateUserEndpoint(valueOrPatch, opOrUserId, path, from, userId));
        }));
    }
    getUserPreferencesEndpoint() {
        return this.http.get(this.currentUserPreferencesUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUserPreferencesEndpoint());
        }));
    }
    getUpdateUserPreferencesEndpoint(configuration) {
        return this.http.put(this.currentUserPreferencesUrl, JSON.stringify(configuration), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUpdateUserPreferencesEndpoint(configuration));
        }));
    }
    getUnblockUserEndpoint(userId) {
        const endpointUrl = `${this.unblockUserUrl}/${userId}`;
        return this.http.put(endpointUrl, null, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUnblockUserEndpoint(userId));
        }));
    }
    getDeleteUserEndpoint(userId) {
        const endpointUrl = `${this.usersUrl}/${userId}`;
        return this.http.delete(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getDeleteUserEndpoint(userId));
        }));
    }
    getRoleEndpoint(roleId) {
        const endpointUrl = `${this.rolesUrl}/${roleId}`;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getRoleEndpoint(roleId));
        }));
    }
    getRoleByRoleNameEndpoint(roleName) {
        const endpointUrl = `${this.roleByRoleNameUrl}/${roleName}`;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getRoleByRoleNameEndpoint(roleName));
        }));
    }
    getRolesEndpoint(page, pageSize) {
        const endpointUrl = page && pageSize ? `${this.rolesUrl}/${page}/${pageSize}` : this.rolesUrl;
        return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getRolesEndpoint(page, pageSize));
        }));
    }
    getNewRoleEndpoint(roleObject) {
        return this.http.post(this.rolesUrl, JSON.stringify(roleObject), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getNewRoleEndpoint(roleObject));
        }));
    }
    getUpdateRoleEndpoint(roleObject, roleId) {
        const endpointUrl = `${this.rolesUrl}/${roleId}`;
        return this.http.put(endpointUrl, JSON.stringify(roleObject), this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getUpdateRoleEndpoint(roleObject, roleId));
        }));
    }
    getDeleteRoleEndpoint(roleId) {
        const endpointUrl = `${this.rolesUrl}/${roleId}`;
        return this.http.delete(endpointUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getDeleteRoleEndpoint(roleId));
        }));
    }
    getPermissionsEndpoint() {
        return this.http.get(this.permissionsUrl, this.requestHeaders).pipe(catchError(error => {
            return this.handleError(error, () => this.getPermissionsEndpoint());
        }));
    }
}
/** @nocollapse */ AccountEndpoint.ɵfac = function AccountEndpoint_Factory(t) { return new (t || AccountEndpoint)(i0.ɵɵinject(i1.ConfigurationService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthService)); };
/** @nocollapse */ AccountEndpoint.ɵprov = i0.ɵɵdefineInjectable({ token: AccountEndpoint, factory: AccountEndpoint.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AccountEndpoint, [{
        type: Injectable
    }], function () { return [{ type: i1.ConfigurationService }, { type: i2.HttpClient }, { type: i3.AuthService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,